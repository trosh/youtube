#!/usr/bin/env python3

from sys import argv, exit, stdout
from urllib import request
import re
from html.parser import HTMLParser
import youtube_dl
from queue import Queue
from threading import Thread, Lock

def help():
    print('''usage: {executablename} <query>
Search for videos/tracks/playlists in YouTube
Can be piped to yu
'''.format(executablename=argv[0]))

if len(argv) < 2:
    help()
    exit(1)

query = []

while len(argv) > 1:
    s = argv[1]
    if s[0] == "-":
        if s in ["-h", "--help"]:
            help()
        else:
            help()
            exit(1)
    else:
        query.append(s)
    del argv[0]
query = "+".join(query)

maxelem = 20

lastsearchfilename = "/tmp/last-youtube-search"

usedlastsearch = False
try:
    with open(lastsearchfilename, "r") as lastsearch:
        lastquery = lastsearch.readline()
        if lastquery == query + "\n":
            usedlastsearch = True
            youtube = lastsearch.read()
except FileNotFoundError:
    pass

if not usedlastsearch:
    youtubeprefix = "https://www.youtube.com/results?search_query="
    youtuberequest = request.urlopen(youtubeprefix + query)
    youtube = str(youtuberequest.read())
    with open(lastsearchfilename, "w") as lastsearch:
        lastsearch.write(query + "\n")
        lastsearch.write(youtube)

ytcutpatt = re.compile("href=\"/(watch|playlist)")
youtube = ytcutpatt.sub("\nwatch", youtube)

htmlparser = HTMLParser()
urlpatt = re.compile("[^\"]*")
vpatt = re.compile("\\?v=[^;]*;")
urls = []
isplaylist = []
for line in youtube.split("\n", 20)[1:]:
    if "yt-pl-thumb-link" in line:
        continue
    url = "http://www.youtube.com/" \
        + urlpatt.match(line).group()
    ispl = ";list=" in url
    if ispl:
        url = vpatt.sub("?", url)
    if url not in urls:
        urls.append(url)
        isplaylist.append(ispl)

if not stdout.isatty():
    for url in urls:
        print(url)
    exit(0)

lock = Lock()
output = []
for i in range(len(urls)):
    output.append(None)
outputed = 0

def worker():
    global output, outputed
    ydl_opts = {
        "simulate": True,
        "quiet": True
        }
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        while True:
            ret = q.get()
            if ret is None:
                return
            n, url = ret
            try:
                info = ydl.extract_info(url, download=False)
            except KeyboardInterrupt:
                exit(1) # Quiet interrupt
            except youtube_dl.DownloadError:
                q.task_done()
                continue
            with lock:
                if "entries" in info:
                    output[n] = ""
                    n_entry = min(len(info["entries"]), 10)
                    for m, entry in enumerate(info["entries"][:n_entries]):
                        output[n] += "{}.{} - {}\n".format(
                            n+1, m+1,
                            entry["title"])
                else:
                    output[n] = "{} - {} - {}\n".format(
                        n+1,
                        info["uploader"],
                        info["title"])
                if n == outputed:
                    for i in range(outputed, len(urls)):
                        if output[i] is None:
                            outputed = i
                            break
                        print(output[i], end="")
            q.task_done()
q = Queue()
n_threads = 4
threads = []
for i in range(n_threads):
    t = Thread(target=worker)
    t.start()
    threads.append(t)
for n, url in enumerate(urls):
    q.put((n, url))
q.join()
for i in range(n_threads):
    q.put(None)
for t in threads:
    t.join()
